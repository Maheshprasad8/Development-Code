// sendOTP 
const User=require("../models/User");
const OTP=require("../models/OTP");
const otpGenerator=require("otp-generator");
const bcrypt=require("bcrypt");
const jwt=require("jsonwebtoken");
const { useStore } = require("react-redux");
require("dotenv").config();

// .....................................
// OTP generate
// .......................................
exports.sendOTP=async(req,res)=>{
    // fetch email from req ki body
    try{
    const {email}=req.body;

    // check if User already exist
    const checkUserPresent=await User.findOne({email})

    // if user already exist , then return a respone

    if(checkUserPresent){
        return res.status(401).json({
          success:false,
          message:'User already registered', 
        })

    }
     // Generate OTP

     var otp=otpGenerator.generate(6,{
        upperCaseAlphabets:false,
        lowerCaseAlphabets:false,
        specialChars:false,
     });
     console.log("OTP generator:",otp);

// check unique otp or not

let result=await OTP.findOne({otp:otp});
while(result){
    otp=otpGenerator(6,{
        upperCaseAlphabets:false,
        lowerCaseAlphabets:false,
        specialChars:false,
    });
    result=await OTP.findOne({otp:otp})
}
const otpPayload={email,otp};
// create an entry for otp
const otpBody=await OTP.create(otpPayload);
console.log(otpBody);
// return respone successful
res.status(200).json({
    success:true,
    message:'OTP sent successfully',
    otp,
});

}
catch(error){
console.log(error);
return res.status(500).json({
    success:false,
    message:error.message,
});
}      
};

// .....................................................
// Signup
// ....................................................
exports.signUp=async(req,res)=>{
//   data fetch from req body  //
try{
const {
    firstName,
    lastName,
    email,
    password,
    confirmPassword,
    accountType,
    contactNumber,
    otp
}=req.body;
// validate krlo
if(!firstName || !lastName || !email || !password || !confirmPassword ||
    !accountType ||!contactNumber || !otp
){
    return res.status(403).json({
        success:false,
        message:"All fields are required",
    });
}

// 2 password match krlo

if(password!=confirmPassword){
    return res.status(400).json({
        success:false,
        message:'Password and confirmPassword not match ,please check your password',

    });
}

// check user already exist or not'
const existingUser=await User.findOne({email});
if(existingUser){
   return res.status(400).json({
       success:false,
       message:'User already registered',
   });

}

// find most recent otp stored for the user
const recentOTP=await OTP.find({email}).sort({createAT:-1}).limit(1);
console.log(recentOTP);

// validate OTP
if(recentOTP.length==0){
    // OTP not found
    return res.status(400).json({
        success:false,
        message:'OTP not Found',
    });
}
else if(otp!==recentOTP.otp){
    // invalid otp
    return res.status(400).json({
        success:false,
        message:"Invalid OTP",
    });
}
// hash password

const hashPassword=await bcrypt.hash(password,10);

//entry create in DB
const ProfileDetails=await Profile.create({
    gender:null,
    dateOfBirth:null,
    about:null,
    contactNumber:null,
});
const user=await User.create({
firstName,
lastName,
email,
contactNumber,
password:hashPassword,
accountType,
additionalDetails:ProfileDetails._id,
image:`https://api.dicebear.com/5.x/intials/svg?seed=${firstName} ${lastName}`

});
// return res
return res.status(200).json({
    success:true,
    message:'User registred Successfully',
    user,  
});

}
catch(error){
console.log(error);
return res.status(500).json({
    success:false,
    message:'User cannot be registered,please try again',
});


}
}

// .........................................................
// login
// ............................................................

exports.login=async(req,res)=>{
try{
// get data from req body
const {email,password}=req.body;

// validate data
if(!email || !password){
    return res.status(403).json({
        success:false,
        message:'All fields are required,please try again',
    });
}
// user check exist or not
const user=await User.findOne({email}).populate("additionalDetails");
if(!user){
    return res.status(401).json({
        success:false,
        message:'User is not registered,please singnUp first',
    });
}

// generate JWT,after password matching
if(await bcrypt.compare(password,user.password)){
   const payload={
    email:useStore.email,
    id:user._id,
    accountType:user.accountType,
   } 
const token=jwt.sign(payload,process.env.JWT_SECRET,{
    expiresIn:"2h",
});
user.token=token;
user.password=undefined;

// create cookie and send respone
const options={
expires:new Date(Date.now()+3*24*60*60*1000),
httpOnly:true,
}
res.cookie("token",token,options).status(200).json({
    success:true,
    token,
    user,
    message:'Logged in successfully',   
});
}
else{
    return res.status(401).json({
        success:false,
        message:'Password is incorrect',
    });
}
}
catch(error){
    console.log(error);
    return res.status(500).json({
    success:false,
    message:'Login Failure,please try again',
    });
}
};

// .........................................
// changePassword 
// .........................................


exports.changePassword=async(req,res)=>{
    // get data fron req body
    //get oldPassword,newPassword,confirmPassword
    //  validation
    // update pwd in DB
    // send mail - Password updated
    // return respone

}
