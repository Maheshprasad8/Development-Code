
const User=require("../models/User");
const mailSender=require("../utiles/mailsender");
const bcrypt=require('bcrypt');
// Reset Password Token
exports.resetPasswordToken=async(req,res)=>{
    try{
    // Get email from req body
    const email=req.body.email;

    // check user for this email,email validation
    const user=await User.findOne({email:email});
    if(!user){
        return res.json({
            success:falae,
            message:'Your Email is not registered with us'
        });
    }
    // generate token  
   const token=crypto.randomUUID();
    // update user by adding token and expiration time
    const updateDetails=await User.findOneAndUpdate(
        {email:email},
        {
            token:token,
            resetPasswordExpires:Date.now() + 5*60*1000,
        },
    {new:true});
    // create url
const url=`http://localhost:3000/update-password/${token}`
    // send email conatining the url
await mailSender(email,
    "Passwrd Reset Link",
     `Password Reset link:${url}`);

    // return respone
return res.json({
    success:true,
    message:'Email sent successfully ,please check email and change password',
});
}
catch(error){
    console.log(error);
return res.status(500).json({
    success:false,
    message:'Something went wrong,please try again later',
});
} 
}

// Reset Password ->db mai update


 exports.resetPassword=async(req,res)=>{
    try{
    // data fetch
 const {password,confirmPassword,token}=req.body; 
    // vailidation
if(password!=confirmPassword){
    return res.json({
        success:false,
        message:'Password not matching',
    });

}
    // get Userdetails from db using token
const userDetails=await User.findOne({token:token});
    // if no entry - invalid token
if(!userDetails){
    return res.json({
        success:false,
        message:'Token is invalid',
    });

}
    // token time check
 if(userDetails.resetPasswordExpires < Date.now()){
    return res.json({
        success:false,
        message:'Token is expired,please regenerate yor token',
    });
 } 
    // hash password
const hashPassword=await bcrypt.hash(password,10);
    // password update
await User.findOneAndUpdate(
    {token:token},
    {password:hashPassword},
    {new:true},
);
    //  return respone
    return res.json({
        success:true,
        message:'Reset successfully',
    });
}
catch(error){
console.log(error);
return res.json({
    success:false,
    message:'Try after some time',
});
}   
 }
